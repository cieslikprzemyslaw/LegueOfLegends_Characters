{"version":3,"sources":["Pages/Characters/Characters.js","Pages/Characters/CharacterPage.js","Components/Error/ErrorPage.js","Pages/App.js","serviceWorker.js","index.js"],"names":["Characters","useState","dataset","setDataset","isLoaded","setIsLoaded","url","useEffect","fetch","then","response","json","data","version","className","Object","values","map","champion","imageUrl","id","Card","key","CardActionArea","component","Link","to","CardMedia","image","title","name","CardContent","Typography","gutterBottom","variant","color","blurb","main","CharacterPage","match","setData","params","champ","allyTips","allytips","split","tips","enemyTips","enemytips","src","alt","lore","length","showInfo","championInfo","spells","spell","full","onClick","console","log","description","showSpells","ErrorPage","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a02bfd34.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardActionArea, CardMedia, CardContent, Typography } from '@material-ui/core';\r\nimport './useStyles.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Characters = () => {\r\n\r\n    const [dataset, setDataset] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false)\r\n\r\n\r\n    const url = 'http://ddragon.leagueoflegends.com/cdn/10.15.1/data/en_GB/champion.json';\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setDataset(json)\r\n                setIsLoaded(true)\r\n            })\r\n    }, [url])\r\n\r\n    const { data, version } = dataset\r\n\r\n    const main = () => {\r\n        // console.log(dataset)\r\n        if (isLoaded) {\r\n            const show = Object.values(data).map(champion => {\r\n                const imageUrl = `http://ddragon.leagueoflegends.com/cdn/img/champion/loading/${champion.id}_0.jpg`\r\n                return (\r\n                    <Card className=\"Card\" key={champion.id}>\r\n                        <CardActionArea\r\n                         component={Link} to={`/character/${champion.id}`}\r\n                        >\r\n                            <CardMedia\r\n                            className=\"CardMedia\"\r\n                            image={imageUrl}\r\n                            title={champion.name}\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h4\" component=\"h3\">\r\n                                    {`${champion.name} ${champion.title}`}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    {champion.blurb}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                )\r\n            })\r\n            return show\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card-section\">\r\n            <h3>Path No. {version}</h3>\r\n            <section>{main()}</section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Characters;","import React, { useEffect, useState } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst CharacterPage = ({ match }) => {\r\n\r\n    const [data, setData] = useState();\r\n    const [isLoaded, setIsLoaded] = useState();\r\n\r\n    const url = `http://ddragon.leagueoflegends.com/cdn/10.5.1/data/en_US/champion/${match.params.id}.json`\r\n    const spellUrl = `http://ddragon.leagueoflegends.com/cdn/10.15.1/img/spell/`\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setData(json)\r\n                setIsLoaded(true)\r\n            })\r\n    }, [url])\r\n\r\n\r\n    const showInfo = () => {\r\n        if (isLoaded) {\r\n            const showChampion = Object.values(data.data).map(champ => {\r\n\r\n                const allyTips = (champ.allytips + \" \").split(\".\").map(tips => <p>{tips}</p>)\r\n                const enemyTips = (champ.enemytips + \" \").split(\".\").map(tips => <p>{tips}</p>)\r\n\r\n                return (\r\n                    <>\r\n                        <img src={`http://ddragon.leagueoflegends.com/cdn/img/champion/loading/${champ.id}_0.jpg`} alt={`${champ.name}`} />\r\n                        <Typography variant=\"h2\" component=\"h3\">{champ.name}</Typography>\r\n                        <Typography variant=\"h3\" component=\"h4\">{champ.title}</Typography>\r\n                        <Typography variant=\"body1\" component=\"span\">{champ.lore}</Typography>\r\n                        {allyTips.length !== 0 ? <Typography variant=\"h5\" component=\"h6\">Ally tips</Typography> : null}\r\n                        {allyTips.length !== 0 ? <Typography variant=\"body2\" component=\"span\">{allyTips}</Typography> : null}\r\n                        {enemyTips.length !== 0 ? <Typography variant=\"h5\" component=\"h6\">Enemy tips</Typography> : null}\r\n                        {enemyTips.length !== 0 ? <Typography variant=\"body2\" component=\"span\">{enemyTips}</Typography> : null}\r\n                    </>\r\n                )\r\n            })\r\n            return showChampion\r\n        }\r\n    }\r\n\r\n    const showSpells = () => {\r\n        if (isLoaded) {\r\n            const spells = Object.values(data.data).map(championInfo => {\r\n                const spell = Object.values(championInfo.spells).map(spell => {\r\n                    // console.log(spell)\r\n                    return (\r\n                        <div className=\"spells\">\r\n                            <img className=\"spells__image\" src={spellUrl + spell.image.full} alt={spell.name} onClick={() => console.log(\"clicked\")} />\r\n                    <Typography className=\"spells__title\" variant=\"body1\" component=\"span\">{spell.name}</Typography>\r\n                    <Typography className=\"spells__description\" variant=\"body1\" component=\"span\">{spell.description}</Typography>\r\n                        </div>\r\n\r\n                    )\r\n                })\r\n                return spell;\r\n            }\r\n            )\r\n            return spells;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showInfo()}\r\n            {showSpells()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterPage;","import React from 'react';\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <div>\r\n            <h2>Error Path doesn't exist</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport '../Css/App.css';\nimport Characters from './Characters/Characters';\nimport CharacterPage from './Characters/CharacterPage'\nimport ErrorPage from '../Components/Error/ErrorPage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <section>\n          <Switch>\n            <Route path=\"/\" exact component={Characters} />\n            <Route path=\"/character/:id\" component={CharacterPage} />\n            <Route component={ErrorPage} />\n          </Switch>\n        </section>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}